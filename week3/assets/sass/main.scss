*{
	box-sizing:border-box;
}



// Variables

$primary-color: #484f59;
$text-color: #dbeaff;
$accent-color: #ed0072;
$column-1-3: 1/3 * 100%;
$column-1-1: 100%;
$column-3-4: 3/4 * 100%;
$column-1-2:50%;
$medium: 768px;
$small: 440px;
$large: 1020px;

$columns: 4;

@for $i from 1 through $columns {
  .cols-#{$i} {
    width: ((100 / $columns) * $i) * 1%;
  }
}




// @mixin media($media) {
// 	@if $media == maxsmall {
// 		@media only screen and (max-width:$small) { @content; }
// 	}
// 	@else if $media == maxmedium {
// 		@media only screen and (max-width:$medium) { @content; }
// 	}
// 	@else if $media == maxlarge{
// 		@media only screen and (max-width:$large) { @content; }
// 	}
// 	@elseif $media == minsmall {
// 		@media only screen and (min-width:$small) { @content; }
// 	}
// 	@else if $media == minmedium {
// 		@media only screen and (min-width:$medium) { @content; }
// 	}
// 	@else if $media == minlarge{
// 		@media only screen and (min-width:$large) { @content; }
// 	}
// }



@mixin media {
	@media only screen and (min-width:$small) { 
		@each $property , $value in $small-things {
			$property: $value;
			background:green;
		}
	}
	@media only screen and (min-width:$medium) { 
		@each $property , $value in $medium-things {
			$property: $value;
		}
	}
	// @media only screen and (min-width:$large) { @extend %large;}

}


	// @include media($map1) {

	// }



// $styles = font-size font-family color;
// $values = 16px  helvetica red;


// $hello: (font-size:1em;, font-family:helvetica;);
// @mixin media {
// 	@media only screen and (max-width:$small) { @include $hello }
// }

// body {
// 	$hello:"font-size:3em;font-family:helvetica;"
// 	@include media 
// }
$breakpoints: (
    small: 320px,
    medium: 600px,
    large: 768px
);
 
// Respond-To Mixin
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $value: map-get($breakpoints, $breakpoint);
         
        @media screen and (min-width: $value) {
            @content;
        }
    }
     
    @warn "Unknown `#{$breakpoint}` in $breakpoints";
}
html, body {
	background: $primary-color;
	font-family: helvetica, sans-serif;
}
body {
	$small-things: (
		background: red,
	);
	$medium-things: (
		background:green,
	);
	// %thing {
	// 	background:yellow;
	// }
	@each $property, $value in $medium-things {
	 	 %thing {
	 	 	$property:$value;
	 	 }
	}
	@extend %thing;
	@each $name, $value in $small-things {
  		.icon--#{$name} {
   		content: $name;
  	}
  	
  	  background-color: #666;
   //  }
}
	@mixin media{}
}
 %things {
 	background:green;
 }
// h1 {
// 	@extends %things
// }

// body {
// 	%small {
// 		background:red;
// 	}
// 	%medium {
// 		background:red;
// 	}
// 	%large {
// 		background:red;
// 	}
// 	@include media
// 	// @include media(minlarge) {
// 	// 	background:green;
// 	// }
// 	// @include media(maxsmall) {
// 	// 	background:orange;
// 	// }
// }


// header {

// }

// @mixin bp {
// 	@media (min-width:$breakpoint) {
// 		@content;
// 	}
// }
// .main-container {
// 	background:$primary-color;
// }

h1 {
	color:$text-color;
	font: {
		size:2rem;
		weight:bold;
	}
	text: {
		transform:uppercase;
		align:center;
	}
	// @include bp {
	// 	font-size:4rem;
	// }
}
// header {
// 	width:$column-1-1;
// 	margin:0 auto;
// 	padding: 20px;
// 	border-bottom: 1px solid $accent-color;
// }
// .how-to {
// 	width: $column-1-1;
// 	padding:20px;
// 	margin: 0 auto;
// 	max-width:1024px;
// 	display:flex;
// 	justify-content: space-around;

// 	p {
// 		color:$text-color;
// 		width:$column-1-2;
// 		padding: 0 10px;
// 	}
// }








// @media (min-width:768px) {
// 	header{
// 		width:$column-3-4;
// 	}
// 	h1 {
// 		font-size: 4rem;
// 	}
// }






// @ rules do something special (directives) 
// @extend
// @media
// @mixin
// @include